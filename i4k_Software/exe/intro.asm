; Listing generated by Microsoft (R) Optimizing Compiler Version 19.10.25019.0 

	TITLE	C:\Users\polyr\Development\cpp\4k\i4k_Software\src\intro.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?initLut@@YGXXZ					; initLut
PUBLIC	?initTexture@@YGXXZ				; initTexture
PUBLIC	?intro_init@@YGXXZ				; intro_init
PUBLIC	?intro_do@@YGXPAIJ@Z				; intro_do
PUBLIC	__real@3acccccd
PUBLIC	__real@3b360b61
PUBLIC	__real@3f800000
PUBLIC	__real@437381dc
PUBLIC	__real@437f0000
EXTRN	?f2i@@YGHM@Z:PROC				; f2i
EXTRN	__fltused:DWORD
_BSS	SEGMENT
?myLut@@3PAIA DD 0e1000H DUP (?)			; myLut
?myTex@@3PAIA DD 010008H DUP (?)			; myTex
_BSS	ENDS
;	COMDAT __real@437f0000
CONST	SEGMENT
__real@437f0000 DD 0437f0000r			; 255
CONST	ENDS
;	COMDAT __real@437381dc
CONST	SEGMENT
__real@437381dc DD 0437381dcr			; 243.507
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3b360b61
CONST	SEGMENT
__real@3b360b61 DD 03b360b61r			; 0.00277778
CONST	ENDS
;	COMDAT __real@3acccccd
CONST	SEGMENT
__real@3acccccd DD 03acccccdr			; 0.0015625
CONST	ENDS
; Function compile flags: /Ogspy
; File c:\users\polyr\development\cpp\4k\i4k_software\src\intro.cpp
;	COMDAT ?intro_do@@YGXPAIJ@Z
_TEXT	SEGMENT
_buffer$ = 8						; size = 4
_itime$ = 12						; size = 4
?intro_do@@YGXPAIJ@Z PROC				; intro_do, COMDAT

; 63   : {

	push	ebx
	push	ebp
	push	esi

; 64   :     for( int i=0; i<XRES*YRES; i++ )

	mov	esi, DWORD PTR _buffer$[esp+8]
	mov	ebx, OFFSET ?myLut@@3PAIA
	push	edi
	mov	edi, DWORD PTR _itime$[esp+12]
	mov	ebp, 921600				; 000e1000H
	sar	edi, 2
	sub	ebx, esi
$LL4@intro_do:

; 65   :     {
; 66   :         const unsigned int val = myLut[i];

	mov	edx, DWORD PTR [ebx+esi]

; 67   : 	    const unsigned int col = myTex[ ((val&0x0000ffff)+(itime>>2))&0x0000ffff ];

	lea	eax, DWORD PTR [edi+edx]

; 68   :         buffer[i] = colScale( col, (val>>16) );

	shr	edx, 16					; 00000010H
	movzx	eax, ax
	mov	ecx, DWORD PTR ?myTex@@3PAIA[eax*4]
	mov	eax, ecx
	and	eax, 65280				; 0000ff00H
	and	ecx, 16711935				; 00ff00ffH
	imul	eax, edx
	imul	ecx, edx
	shr	eax, 8
	shr	ecx, 8
	and	eax, 65280				; 0000ff00H
	and	ecx, 16711935				; 00ff00ffH
	add	eax, ecx
	mov	DWORD PTR [esi], eax
	lea	esi, DWORD PTR [esi+4]
	sub	ebp, 1
	jne	SHORT $LL4@intro_do

; 69   :     }
; 70   : }

	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	ret	8
?intro_do@@YGXPAIJ@Z ENDP				; intro_do
_TEXT	ENDS
; Function compile flags: /Ogspy
; File c:\users\polyr\development\cpp\4k\i4k_software\src\intro.cpp
;	COMDAT ?colScale@@YGIIH@Z
_TEXT	SEGMENT
_col$ = 8						; size = 4
_sca$ = 12						; size = 4
?colScale@@YGIIH@Z PROC					; colScale, COMDAT

; 59   :     return ((((col&0x00ff00ff)*sca)>>8)&0x00ff00ff) + ((((col&0x0000ff00)*sca)>>8)&0x0000ff00);

	mov	ecx, DWORD PTR _col$[esp-4]
	mov	edx, 65280				; 0000ff00H
	mov	eax, ecx
	and	eax, edx
	imul	eax, DWORD PTR _sca$[esp-4]
	shr	eax, 8
	and	eax, edx
	mov	edx, 16711935				; 00ff00ffH
	and	ecx, edx
	imul	ecx, DWORD PTR _sca$[esp-4]
	shr	ecx, 8
	and	ecx, edx
	add	eax, ecx

; 60   : 
; 61   : }

	ret	8
?colScale@@YGIIH@Z ENDP					; colScale
_TEXT	ENDS
; Function compile flags: /Ogspy
; File c:\users\polyr\development\cpp\4k\i4k_software\src\intro.cpp
;	COMDAT ?intro_init@@YGXXZ
_TEXT	SEGMENT
?intro_init@@YGXXZ PROC					; intro_init, COMDAT

; 52   : 	initTexture();

	call	?initTexture@@YGXXZ			; initTexture

; 53   :     initLut();

	jmp	?initLut@@YGXXZ				; initLut
?intro_init@@YGXXZ ENDP					; intro_init
_TEXT	ENDS
; Function compile flags: /Ogspy
; File c:\users\polyr\development\cpp\4k\i4k_software\src\intro.cpp
;	COMDAT ?initTexture@@YGXXZ
_TEXT	SEGMENT
?initTexture@@YGXXZ PROC				; initTexture, COMDAT

; 40   : {

	push	esi
	push	edi

; 41   : 	for( int j=0; j<256; j++ )

	xor	esi, esi
	mov	edx, OFFSET ?myTex@@3PAIA
$LL4@initTextur:

; 42   :     for( int i=0; i<256; i++ )

	xor	edi, edi
$LL7@initTextur:

; 43   :     {
; 44   :         int r = (i ^ j);
; 45   :         int g = (((i>>6)&1)^((j>>6)&1))*255;
; 46   :         g = (g*5 + 3*r)>>3;

	mov	ecx, edi
	xor	ecx, esi
	mov	eax, ecx
	sar	eax, 6
	and	eax, 1
	imul	eax, eax, 425
	add	eax, ecx
	imul	ecx, eax, 3
	sar	ecx, 3

; 47   :         myTex[256*j+i] = 0xff000000 | (g<<16) | (g<<8) | g;

	mov	eax, ecx
	or	eax, -256				; ffffff00H
	shl	eax, 8
	or	eax, ecx
	shl	eax, 8
	or	eax, ecx
	inc	edi
	mov	DWORD PTR [edx], eax
	add	edx, 4
	cmp	edi, 256				; 00000100H
	jl	SHORT $LL7@initTextur

; 41   : 	for( int j=0; j<256; j++ )

	inc	esi
	cmp	edx, OFFSET ?myTex@@3PAIA+262144
	jl	SHORT $LL4@initTextur

; 48   :     }
; 49   : }

	pop	edi
	pop	esi
	ret	0
?initTexture@@YGXXZ ENDP				; initTexture
_TEXT	ENDS
; Function compile flags: /Ogspy
; File c:\users\polyr\development\cpp\4k\i4k_software\src\intro.cpp
;	COMDAT ?initLut@@YGXXZ
_TEXT	SEGMENT
_w$1$ = -20						; size = 4
_i$1 = -20						; size = 4
tv248 = -16						; size = 4
_j$2 = -16						; size = 4
_iu$1$ = -12						; size = 4
_y$1$ = -8						; size = 4
tv259 = -4						; size = 4
?initLut@@YGXXZ PROC					; initLut, COMDAT

; 16   : {

	sub	esp, 20					; 00000014H

; 17   : 	for( int j=0; j<YRES; j++ )

	fld	DWORD PTR __real@3b360b61
	fld1
	fld	DWORD PTR __real@3acccccd
	fld	DWORD PTR __real@437f0000
	push	ebx
	push	ebp
	push	esi
	xor	esi, esi
	push	edi
	mov	DWORD PTR _j$2[esp+36], esi
	mov	edi, OFFSET ?myLut@@3PAIA
	jmp	SHORT $LN4@initLut
$LN32@initLut:
	fxch	ST(2)
	fxch	ST(3)
	fxch	ST(2)
	fxch	ST(1)
$LN4@initLut:
	fild	DWORD PTR _j$2[esp+36]

; 18   :     for( int i=0; i<XRES; i++ )

	xor	ebp, ebp
	mov	DWORD PTR _i$1[esp+36], ebp
	fmulp	ST(4), ST(0)
	fld	ST(2)
	fsubrp	ST(4), ST(0)
	fxch	ST(3)
	fst	DWORD PTR _y$1$[esp+36]
	fld	ST(0)
	fmul	ST(0), ST(1)
	fst	DWORD PTR tv259[esp+36]
	jmp	SHORT $LN7@initLut
$LN29@initLut:
	fxch	ST(1)
	fxch	ST(4)
	fxch	ST(1)
	fxch	ST(2)
$LN7@initLut:

; 19   :     {
; 20   :         const float x = -1.0f + (float)i*(2.0f/(float)XRES);

	fild	DWORD PTR _i$1[esp+36]
	fmulp	ST(3), ST(0)
	fxch	ST(2)
	fsub	ST(0), ST(3)

; 21   :         const float y =  1.0f - (float)j*(2.0f/(float)YRES);
; 22   :         const float r = sqrtf( x*x+y*y );

	fld	ST(0)
	fmul	ST(0), ST(1)
	faddp	ST(3), ST(0)
	fxch	ST(2)
	fsqrt

; 23   :         const float a = atan2f( y, x );
; 24   : 
; 25   :         const float u = 1.0f/r;

	fld	ST(3)
	fdiv	ST(0), ST(1)
	fxch	ST(3)
	fxch	ST(1)
	fxch	ST(2)
	fxch	ST(1)
	fpatan
	fstp	DWORD PTR tv248[esp+36]

; 26   :         const float v = a*(3.0f/3.14159f);
; 27   :               float w = r*r;

	fmul	ST(0), ST(0)
	fst	DWORD PTR _w$1$[esp+36]

; 28   :         if( w>1.0f ) w=1.0f;

	fcomp	ST(2)
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN25@initLut
	fxch	ST(1)
	fstp	DWORD PTR _w$1$[esp+36]
	jmp	SHORT $LN8@initLut
$LN25@initLut:
	fstp	ST(1)
$LN8@initLut:

; 29   : 
; 30   :         const int iu = f2i(u*255.0f);

	fmulp	ST(1), ST(0)
	push	ecx
	fstp	DWORD PTR [esp]
	call	?f2i@@YGHM@Z				; f2i

; 31   :         const int iv = f2i(v*255.0f);

	fld	DWORD PTR __real@437381dc
	fmul	DWORD PTR tv248[esp+36]
	push	ecx
	mov	DWORD PTR _iu$1$[esp+40], eax
	fstp	DWORD PTR [esp]
	call	?f2i@@YGHM@Z				; f2i

; 32   :         const int iw = f2i(w*255.0f);

	fld	DWORD PTR _w$1$[esp+36]
	mov	ebx, eax
	fmul	DWORD PTR __real@437f0000
	push	ecx
	fstp	DWORD PTR [esp]
	call	?f2i@@YGHM@Z				; f2i
	fld	DWORD PTR _y$1$[esp+36]
	fld1
	fld	DWORD PTR tv259[esp+36]
	fld	DWORD PTR __real@437f0000
	fld	DWORD PTR __real@3acccccd

; 33   : 
; 34   :         myLut[XRES*j+i] = ((iw&255)<<16) | ((iv&255)<<8) | (iu&255);

	movzx	ecx, al
	shl	ecx, 8
	movzx	eax, bl
	or	ecx, eax
	mov	eax, DWORD PTR _iu$1$[esp+36]
	shl	ecx, 8
	movzx	eax, al
	or	ecx, eax
	inc	ebp
	mov	DWORD PTR [edi], ecx
	add	edi, 4
	mov	DWORD PTR _i$1[esp+36], ebp
	cmp	ebp, 1280				; 00000500H
	jl	$LN29@initLut

; 17   : 	for( int j=0; j<YRES; j++ )

	fstp	ST(0)
	inc	esi
	mov	DWORD PTR _j$2[esp+36], esi
	fstp	ST(3)
	fstp	ST(1)
	fstp	ST(0)
	fstp	ST(0)
	fld1
	fld	DWORD PTR __real@3b360b61
	fld	DWORD PTR __real@437f0000
	fld	DWORD PTR __real@3acccccd
	cmp	edi, OFFSET ?myLut@@3PAIA+3686400
	jl	$LN32@initLut
	fstp	ST(2)
	pop	edi
	fstp	ST(1)
	pop	esi
	fstp	ST(1)
	pop	ebp
	fstp	ST(0)
	pop	ebx

; 35   :     }
; 36   : }

	add	esp, 20					; 00000014H
	ret	0
?initLut@@YGXXZ ENDP					; initLut
_TEXT	ENDS
; Function compile flags: /Ogspy
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\math.h
;	COMDAT _sqrtf
_TEXT	SEGMENT
__X$ = 8						; size = 4
_sqrtf	PROC						; COMDAT

; 746  :         return (float)sqrt(_X);

	fld	DWORD PTR __X$[esp-4]
	fsqrt

; 747  :     }

	ret	0
_sqrtf	ENDP
_TEXT	ENDS
; Function compile flags: /Ogspy
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\math.h
;	COMDAT _atan2f
_TEXT	SEGMENT
__Y$ = 8						; size = 4
__X$ = 12						; size = 4
_atan2f	PROC						; COMDAT

; 620  :         return (float)atan2(_Y, _X);

	fld	DWORD PTR __Y$[esp-4]
	fld	DWORD PTR __X$[esp-4]
	fpatan

; 621  :     }

	ret	0
_atan2f	ENDP
_TEXT	ENDS
END
